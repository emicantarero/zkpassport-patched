import { Binary, HexString } from "./binary";
import { Certificate, CSCMasterlist, PassportViewModel, Query } from "./types";
export declare function isSignatureAlgorithmSupported(passport: PassportViewModel, signatureAlgorithm: "RSA" | "ECDSA" | ""): boolean;
export declare function isCSCSupported(csc: Certificate): boolean;
export declare function isIDSupported(passport: PassportViewModel): boolean;
export declare function getCSCMasterlist(): CSCMasterlist;
export declare function getTBSMaxLen(passport: PassportViewModel): number;
export declare function getCSCForPassport(passport: PassportViewModel, masterlist?: CSCMasterlist): Certificate | null;
export declare function processECDSASignature(signature: number[], byteSize: number): number[];
export declare function getScopeHash(value?: string): bigint;
export declare function processSodSignature(signature: number[], passport: PassportViewModel): number[];
export declare function getDSCCircuitInputs(passport: PassportViewModel, salt: bigint, merkleTreeLeaves?: Binary[], masterlist?: CSCMasterlist, merkleProof?: {
    root: string | HexString;
    index: number;
    path: (string | HexString)[];
}): Promise<any>;
export declare function getIDDataCircuitInputs(passport: PassportViewModel, saltIn: bigint, saltOut: bigint): Promise<any>;
export declare function getDSCCountry(passport: PassportViewModel): string;
export declare function getIntegrityCheckCircuitInputs(passport: PassportViewModel, saltIn: bigint, saltOut: bigint): Promise<any>;
export declare function getFirstNameRange(passport: PassportViewModel): [number, number];
export declare function getLastNameRange(passport: PassportViewModel): [number, number];
export declare function getFullNameRange(passport: PassportViewModel): [number, number];
export declare function getDiscloseCircuitInputs(passport: PassportViewModel, query: Query, salt: bigint, service_scope?: bigint, service_subscope?: bigint): Promise<any>;
export declare function getDiscloseFlagsCircuitInputs(passport: PassportViewModel, query: Query, salt: bigint, service_scope?: bigint, service_subscope?: bigint): Promise<any>;
export declare function calculateAge(passport: PassportViewModel): number;
export declare function getAgeCircuitInputs(passport: PassportViewModel, query: Query, salt: bigint, service_scope?: bigint, service_subscope?: bigint): Promise<any>;
export declare function getNationalityInclusionCircuitInputs(passport: PassportViewModel, query: Query, salt: bigint, service_scope?: bigint, service_subscope?: bigint): Promise<any>;
export declare function getIssuingCountryInclusionCircuitInputs(passport: PassportViewModel, query: Query, salt: bigint, service_scope?: bigint, service_subscope?: bigint): Promise<any>;
export declare function getNationalityExclusionCircuitInputs(passport: PassportViewModel, query: Query, salt: bigint, service_scope?: bigint, service_subscope?: bigint): Promise<any>;
export declare function getIssuingCountryExclusionCircuitInputs(passport: PassportViewModel, query: Query, salt: bigint, service_scope?: bigint, service_subscope?: bigint): Promise<any>;
export declare function getBirthdateCircuitInputs(passport: PassportViewModel, query: Query, salt: bigint, service_scope?: bigint, service_subscope?: bigint): Promise<any>;
export declare function getExpiryDateCircuitInputs(passport: PassportViewModel, query: Query, salt: bigint, service_scope?: bigint, service_subscope?: bigint): Promise<any>;
